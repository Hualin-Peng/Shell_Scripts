单调栈：
https://zhuanlan.zhihu.com/p/61423849
==================
perf:
https://www.cnblogs.com/zhiranok/archive/2012/08/13/context_switch_1.html
==================
apt-get install google-perftools libgoogle-perftools-dev
ln -sf /usr/lib/x86_64-linux-gnu/libtcmalloc.so  /usr/lib/libtcmalloc.so
==================
perf record -F 99 -p $(thread_num)  -g -- sleep 30
perf script -i perf.data &> perf.unfold
./FlameGraph/stackcollapse-perf.pl perf.unfold &> perf.folded
./FlameGraph/flamegraph.pl perf.folded > perf.svg

==================
高速卷积：
https://www.cs.utexas.edu/~flame/pubs/GotoTOMS_revision.pdf
https://baijiahao.baidu.com/s?id=1644627009606470144&wfr=spider&for=pc
=========================================================================
https://fedoraproject.org/wiki/EPEL
=========================================================================
dd bs=512 count=625139712 if=/dev/sdb of=/dev/sda status=progress
zcat linux-OS.img.gz | dd of=/dev/sda status=progress
=========================================================================
汉明码：
https://blog.csdn.net/qq_41113081/article/details/88242650
==========================================================================
计算机组成原理：
https://blog.csdn.net/qq_44152807/article/details/103971361
==========================================================================
Note-Pad++：
https://blog.csdn.net/mmphhh/article/details/99872607#comments
artical link:
https://arxiv.org/pdf/1807.08248.pdf
https://arxiv.org/pdf/1807.11597.pdf
Centos7 docker base image：
https://registry.hub.docker.com/_/centos?tab=tags
https://docs.docker.com/engine/install/binaries/
===========================================================================
https://zhuanlan.zhihu.com/p/71437161
===========================================================================
https://fantianzuo.blog.csdn.net/article/details/106322978#t30
https://zhuanlan.zhihu.com/p/93530380
https://www.cnblogs.com/houkai/p/3480940.html
https://www.jianshu.com/p/bb123944d3e5

# include <stdio.h>
# include <math.h>

int count = 0;
//enum BOOL {false=0, true=1};
enum BOOL {false, true};

enum BOOL check(int record[], int i, int j){ //ith row, jth column
    int k = 0;
    while(k<i){
        if(record[k]==j || fabs(j-record[k])==fabs(i-k))
	    return false;
	k++;
    }
    return true;
}

void placeQueen(int record[], int k, int n){
    if(k>n){
        for(int i=0; i<n; i++){
	    printf("%d ", record[i]);
	    //record[i]=0;
	}
	printf("\n");
	count++;
    }else{
	for(int i=1; i<=n; i++){
	    if(check(record, k-1, i)==1){
		record[k-1] = i;
	        placeQueen(record, k+1, n);
	    }
	    else
		;
	}
    }
}

void NQueen(int record[], int n){
    placeQueen(record, 1, n);
    printf("%d\n", count);
}

int main(){
    int record[8] = {0};
    NQueen(record, 8);

    return 0;
}
